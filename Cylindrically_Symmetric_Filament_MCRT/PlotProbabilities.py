#===============================================================================#
#-------------------------------------------------------------------------------#
#		PlotProbabilities.py                                                    #
#		Plots the emission probabilities as generated by RadTrans_MainCode.F90  #
#		Details of this program below.                                          #
#-------------------------------------------------------------------------------#
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import math
import datetime
import os
from astropy import units as u

now = datetime.datetime.now()

print ()
print ("Current date and time using str method of datetime object:")
print (str(now))


##
date_last_edited= "12/04/2019"													#PLEASE KEEP THIS UP-TO-DATE!!                                                #

																				#Input directory into which to save plots here                                #
savepath = "C:/Users/C1838736/Documents/ATH_PhD/_PhD_Output/" + \
"Cylindrically_Symmetric_Filament_MCRT/"
																				#    Note: if func_datetime_savepath used, a subdirectory will be made here   #
																				#      using today's date at runtime.                                         #

importstring = "ProbabilitiesData.csv"												#File for data to be imported for plotting.                                   #

##

#-------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------#

# !!!
author= "Andrew T. Hannington"
email= "HanningtonAT@cardiff.ac.uk"
affiliation= "Cardiff University, Wales, UK"

adapted_from_author = "Prof. A.P. Whitworth"
adapted_from_email = "anthony.whitworth@cardiff.ac.uk"
adapted_from_affiliation = "Cardiff University, Wales, UK"

date_created= "12/04/2019"

#
# Notes: Python program for plotting emission probabilities from 
# 		 Prof. A. P. Whitworth's RadTrans MCRT code for Radially Symmetric 
#		 Filamentary Molecular Clouds.
#		 Equivalent subroutine in A.P.W's code:
#		 # SUBROUTINE RT_EmProbs_DMBB(TEkTOT,teT,WLlTOT,WLlam,WLdlam,WLchi,\
#			WLalb,PRnTOT,WTpack,WTplot,WTpBB,WTlBBlo,WTlBBup,WTpMB,WTlMBlo, \
#			WTlMBup,teLMmb,WTpDM,WTlDMlo,WTlDMup,teLMTdm)
#
#-------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------#

#-------------------------------------------------------------------------------#
#		Below are functions etc. used by this program                           #
#                                                                               #
#                                                                               #


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
def func_datetime_savepath (input_savepath_string):
	"""
	Description: Function for generating a savepath string and creating 
				subsequent directory.
				NOTE: this function will NOT create all intermediate level 
				directories in path name. To do this, please see Python 
				documentation on os.makedirs()
	Inputs:		Var: input_savepath_string	Type:string 	Dtype: char
	Outputs:	Var: savepath				Type: string	Dtype: char
				------
	Notes:		Created 09/04/2019 by ATH. Working as of 09/04/2019
	"""
	
	save_date = str(now.strftime("%Y-%m-%d-%H-%M"))
	savepath = input_savepath_string + "/" + save_date +"/"
	print()
	print("Savepath generated! Datetime used!")
	os.mkdir(savepath)
	print("Directory created at savepath!")
	print("Your savepath directory path is:")
	print(savepath)
	print()
	return savepath

#-------------------------------------------------------------------------------#
#		Below is the beginning of the program which writes to screen the        #
#		information about authors etc. above.                                   #
#                                                                               #
#                                                                               #
print("*****")
print()
print("**Plot Dust Properties Program**")
print()
print(f"Author: {author}")
print(f"Email: {email}")
print(f"Affiliation: {affiliation}")
print()
print(f"Adapted from work by: {adapted_from_author}")
print(f"Email: {adapted_from_email}")
print(f"Affiliation: {adapted_from_affiliation}")
print()
print(f"Program first created: {date_created}")
print(f"Program last edited: {date_last_edited}")
print()
print("*****")
print()

del author, email, affiliation, adapted_from_affiliation, adapted_from_author \
,adapted_from_email, date_created, date_last_edited								#Clear preamble variables from memory                                         #

#-------------------------------------------------------------------------------#
#		Begin Program by loading in data from RadTrans_MainCode.F90.            #
#                                                                               #
#                                                                               #

read_data = pd.read_csv(importstring,delimiter=" ")								#We read the data into a Pandas Data Frame                                    #

print()
print("File read from:", importstring)
del importstring																#Clear importstring from memory                                               #
print("Data Frame shape:")
print(read_data.shape)															#Confirm data is of correct shape                                             #

print()





#===============================================================================#
#				Original FORTRAN90 Code EXCERPT by Prof. A. P. Whitworth		#
#						Extracted 12/04/2019									#
#																				#
#																				#
#===============================================================================#



# ! IF (WTplot==1) THEN                                      ! [] CONDITIONAL DIAGNOSTIC PLOTS
  # ! WLlTOTrea=DBLE(WLlTOT)                                 !   compute REAL(WLlTOT)
  # ! WTpackINV=1./DBLE(WTpack)                              !   compute WTpackINV=1/WTpack
  # ! DO WLl=1,WLlTOT                                        !     start loop over wavelengths
    # ! PGx(WLl)=LOG10(WLlam(WLl))                           !       compute boundary wavelength (abscissa)
  # ! ENDDO                                                  !     end loop over wavelengths
  # ! DO TEk=0,TEkTOT,(TEkTOT/2)                             !   start loop over temperatures
    # ! PGxMIN=LOG10(WLlam(WTlMIN(TEk)))+0.2                 !     compute maximum abscissa
    # ! PGxMAX=LOG10(WLlam(WTlMAX(TEk)))-1.1                 !     compute maximum abscissa
    # ! PGyMAX=-0.1E+11                                      !     set PGyMAX to very low value
    # ! PGy=-0.1E+31                                         !     set PGy to extremely low value
    # ! DO WLl=WTlMIN(TEk),WTlMAX(TEk)                       !     start loop over wavelengths
      # ! PGy(WLl)=LOG10(WTpBB(WLl,TEk)-WTpBB(WLl-1,TEk))-  &!       compute BB emission ......
                                    # ! &LOG10(WLdlam(WLl))  !       ... probability (ordinate)
      # ! IF (PGy(WLl)>PGyMAX) PGyMAX=PGy(WLl)               !       update max ordinate as appropriate
    # ! ENDDO                                                !     end loop over wavelengths
    # ! PGyMAX=PGyMAX+0.2                                    !     compute maximum Planck Function (ordinate)
    # ! PGyMIN=PGyMAX-2.6                                    !     compute minimum Planck Function (ordinate)
    # ! WTpACC=0                                             !     set accumulator to zero
    # ! DO WLl=1,WTpack                                      !     start loop over luminosity packets
      # ! CALL RT_LumPack_BB(TEk,TEkTOT,PRnTOT,WLlTOT,WTpBB,WTlBBlo,WTlBBup,WLlEM)
      # ! WTpACC(WLlEM)=WTpACC(WLlEM)+1                      !       increment WTpACC
    # ! ENDDO                                                !     end loop over luminosity packets
    # ! PGz=-0.1E+31                                         !     set PGz to extremely low value
    # ! DO WLl=WTlMIN(TEk),WTlMAX(TEk)                       !     start loop over significant wavelengths
      # ! PGz(WLl)=LOG10(DBLE(WTpACC(WLl))*WTpackINV/       &!       compute BB emission ......
                                          # ! &WLdlam(WLl))  !       ... probability (ordinate)
      # ! IF ((TEk==(TEkTOT/2)).AND.(MOD(WLl,10)==0)) WRITE (*,*) WLl,WLlam(WLl),PGz(WLl)
    # ! ENDDO                                                !     end loop over significant wavelengths
                                                         # ! !     [] PLOT BB SPECTRA TO SCREEN
    # ! WRITE (*,*) ' '                                      !     print blank line
    # ! WRITE (6,"(F11.3,2(5X,I5,F15.5))") teT(TEk),WTlMIN(TEk),WLlam(WTlMIN(TEk)),WTlMAX(TEk),WLlam(WTlMAX(TEk))
    # ! CALL PGBEG(0,'/XWINDOW',1,1)                         !     open PGPLOT to display on screen
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpBB\fn]',&
    # ! &'BB EMISSION PROBABILITIES, \fiWTpBB\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
                                                         # ! !     [] SAVE TO POSTSCRIPT FILE 
    # ! CALL PGBEG(0,'/PS',1,1)                              !     open PGPLOT to produce postscript
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpBB\fn]',&
    # ! &'BB EMISSION PROBABILITIES, \fiWTpBB\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
  # ! ENDDO                                                  !   end loop over temperatures
  # ! DO TEk=0,TEkTOT,(TEkTOT/2)                             !   start loop over temperatures
    # ! PGxMIN=LOG10(WLlam(WTlMIN(TEk)))+0.2                 !     compute maximum abscissa
    # ! PGxMAX=LOG10(WLlam(WTlMAX(TEk)))-1.1                 !     compute maximum abscissa
    # ! PGyMAX=-0.1E+11                                      !     set PGyMAX to very low value
    # ! PGy=-0.1E+31                                         !     set PGy to extremely low value
    # ! DO WLl=1,WLlTOT                                      !     start loop over wavelengths
      # ! PGy(WLl)=LOG10(WTpMB(WLl,TEk)-WTpMB(WLl-1,TEk))-  &!       compute BB emission ......
                                    # ! &LOG10(WLdlam(WLl))  !       ... probability (ordinate)
      # ! IF (PGy(WLl)>PGyMAX) PGyMAX=PGy(WLl)               !       update max ordinate as appropriate
    # ! ENDDO                                                !     end loop over wavelengths
    # ! PGyMAX=PGyMAX+0.2                                    !     compute maximum Planck Function (ordinate)
    # ! PGyMIN=PGyMAX-2.6                                    !     compute minimum Planck Function (ordinate)
    # ! WTpACC=0                                             !     set accumulator to zero
    # ! DO WLl=1,WTpack                                      !     start loop over luminosity packets
      # ! CALL RT_LumPack_MB(TEk,TEkTOT,PRnTOT,WLlTOT,WTpMB,WTlMBlo,WTlMBup,WLlEM)
      # ! WTpACC(WLlEM)=WTpACC(WLlEM)+1                      !       increment WTpACC
    # ! ENDDO                                                !     end loop over luminosity packets
    # ! PGz=-0.1E+31                                         !     set PGz to extremely low value
    # ! DO WLl=WTlMIN(TEk),WTlMAX(TEk)                       !     start loop over significant wavelengths
       # ! PGz(WLl)=LOG10(DBLE(WTpACC(WLl))*WTpackINV/      &!       compute MB emission ......
                                          # ! &WLdlam(WLl))  !       ... probability (ordinate)
    # ! ENDDO                                                !     end loop over significant wavelengths
                                                         # ! !     [] PLOT MB SPECTRA TO SCREEN
    # ! WRITE (*,*) ' '                                      !     print blank line
    # ! WRITE (6,"(F11.3,2(5X,I5,F15.5))") teT(TEk),WTlMIN(TEk),WLlam(WTlMIN(TEk)),WTlMAX(TEk),WLlam(WTlMAX(TEk))
    # ! CALL PGBEG(0,'/XWINDOW',1,1)                         !     open PGPLOT to display on screen
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpMB\fn]',&
    # ! &'MB EMISSION PROBABILITIES, \fiWTpMB\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
                                                         # ! !     [] SAVE TO POSTSCRIPT FILE 
    # ! CALL PGBEG(0,'/PS',1,1)                              !     open PGPLOT to produce postscript
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpMB\fn]',&
    # ! &'MB EMISSION PROBABILITIES, \fiWTpMB\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
  # ! ENDDO                                                  !   end loop over temperatures
  # ! DO TEk=0,TEkTOT,(TEkTOT/2)                             !   start loop over temperatures
    # ! PGxMIN=LOG10(WLlam(WTlMIN(TEk)))+0.2                 !     compute maximum abscissa
    # ! PGxMAX=LOG10(WLlam(WTlMAX(TEk)))-1.1                 !     compute maximum abscissa
    # ! PGyMAX=-0.1E+11                                      !     set PGyMAX to very low value
    # ! PGy=-0.1E+31                                         !     set PGy to extremely low value
    # ! DO WLl=1,WLlTOT                                      !     start loop over wavelengths
      # ! PGy(WLl)=LOG10(WTpDM(WLl,TEk)-WTpDM(WLl-1,TEk))-  &!       compute DM emission ......
                                    # ! &LOG10(WLdlam(WLl))  !       ... probability (ordinate)
      # ! IF (PGy(WLl)>PGyMAX) PGyMAX=PGy(WLl)               !       update max ordinate as appropriate
    # ! ENDDO                                                !     end loop over wavelengths
    # ! PGyMAX=PGyMAX+0.2                                    !     compute maximum Planck Function (ordinate)
    # ! PGyMIN=PGyMAX-2.6                                    !     compute minimum Planck Function (ordinate)
    # ! WTpACC=0                                             !     set accumulator to zero
    # ! DO WLl=1,WTpack                                      !     start loop over luminosity packets
      # ! CALL RT_LumPack_DM(TEk,TEkTOT,PRnTOT,WLlTOT,WTpDM,WTlDMlo,WTlDMup,WLlEM)
      # ! WTpACC(WLlEM)=WTpACC(WLlEM)+1                      !       increment WTpACC
    # ! ENDDO                                                !     end loop over luminosity packets
    # ! PGz=-0.1E+31                                         !     set PGz to extremely low value
    # ! DO WLl=WTlMIN(TEk),WTlMAX(TEk)                       !     start loop over significant wavelengths
       # ! PGz(WLl)=LOG10(DBLE(WTpACC(WLl))*WTpackINV/      &!       compute BB emission ......
                                          # ! &WLdlam(WLl))  !       ... probability (ordinate)
    # ! ENDDO                                                !     end loop over significant wavelengths
                                                         # ! !     [] PLOT DM SPECTRA TO SCREEN
    # ! WRITE (*,*) ' '                                      !     print blank line
    # ! WRITE (6,"(F11.3,2(5X,I5,F15.5))") teT(TEk),WTlMIN(TEk),WLlam(WTlMIN(TEk)),WTlMAX(TEk),WLlam(WTlMAX(TEk))
    # ! CALL PGBEG(0,'/XWINDOW',1,1)                         !     open PGPLOT to display on screen
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpDM\fn]',&
    # ! &'DM EMISSION PROBABILITIES, \fiWTpDM\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
                                                         # ! !     [] SAVE TO POSTSCRIPT FILE 
    # ! CALL PGBEG(0,'/PS',1,1)                              !     open PGPLOT to produce postscript
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpDM\fn]',&
    # ! &'DM EMISSION PROBABILITIES, \fiWTpDM\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
  # ! ENDDO                                                  !   end loop over temperatures
  # ! DO TEk=0,TEkTOT,(TEkTOT/2)                             !   start loop over temperatures
    # ! PGxMIN=LOG10(WLlam(WTlMIN(TEk)))+0.2                 !     compute maximum abscissa
    # ! PGxMAX=LOG10(WLlam(WTlMAX(TEk)))-1.1                 !     compute maximum abscissa
    # ! PGyMAX=-0.1E+11                                      !     set PGyMAX to very low value
    # ! PGy=-0.1E+31                                         !     set PGy to extremely low value
    # ! DO WLl=1,WLlTOT                                      !     start loop over wavelengths
      # ! PGy(WLl)=LOG10(WTpDM(WLl,TEk)-WTpDM(WLl-1,TEk))-  &!       compute DM emission ......
                                    # ! &LOG10(WLdlam(WLl))  !       ... probability (ordinate)
      # ! IF (PGy(WLl)>PGyMAX) PGyMAX=PGy(WLl)               !       update max ordinate as appropriate
      # ! PGz(WLl)=LOG10(WTpMB(WLl,TEk)-WTpMB(WLl-1,TEk))-  &!       compute DM emission ......
                                    # ! &LOG10(WLdlam(WLl))  !       ... probability (ordinate)
      # ! IF (PGz(WLl)>PGyMAX) PGyMAX=PGy(WLl)               !       update max ordinate as appropriate
    # ! ENDDO                                                !     end loop over wavelengths
    # ! PGyMAX=PGyMAX+0.2                                    !     compute maximum Planck Function (ordinate)
    # ! PGyMIN=PGyMAX-2.6                                    !     compute minimum Planck Function (ordinate)
                                                         # ! !     [] PLOT TO SCREEN
    # ! WRITE (*,*) ' '                                      !     print blank line
    # ! WRITE (6,"(F11.3,2(5X,I5,F15.5))") teT(TEk),WTlMIN(TEk),WLlam(WTlMIN(TEk)),WTlMAX(TEk),WLlam(WTlMAX(TEk))
    # ! CALL PGBEG(0,'/XWINDOW',1,1)                         !     open PGPLOT to display on screen
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpDM\fn]',&
    # ! &'DM EMISSION PROBABILITIES, \fiWTpDM\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
                                                         # ! !     [] SAVE TO POSTSCRIPT FILE 
    # ! CALL PGBEG(0,'/PS',1,1)                              !     open PGPLOT to produce postscript
    # ! CALL PGENV(PGxMIN,PGxMAX,PGyMIN,PGyMAX,0,0)          !     construct frame
    # ! CALL PGLAB('log\d10\u[\gl/\gmm]','log\d10\u[\fiWTpDM\fn]',&
    # ! &'DM EMISSION PROBABILITIES, \fiWTpDM\fn, AS A FUNCTION OF WAVELENGTH, \gl. ')
    # ! CALL PGSLS(2)                                        !     set line style to 'dashed'
    # ! CALL PGLINE(WLlTOT,PGx,PGy)                          !     plot discrete probabilities
    # ! CALL PGSLS(1)                                        !     set line style to 'full'
    # ! CALL PGLINE(WLlTOT,PGx,PGz)                          !     plot estimated probabilities
    # ! CALL PGEND                                           !     close PGPLOT
  # ! ENDDO                                                  !   end loop over temperatures
# ! ENDIF                                                    ! end diagnostic plots